# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Asset"""
type Asset {
  blurhash: String!
  cloudfareId: String
  height: Float
  id: ID!

  """This is the key from the bucket"""
  key: String!
  lastReferenceCheckedAt: String
  mimeType: String!
  originalFileName: String!
  owner: User!
  size: Float!
  variants: [String!]!
  width: Float
}

type AssetResponse {
  asset: Asset
  message: String
  statusCode: Int
  success: Boolean
}

type AssetsResponse {
  assets: [Asset!]
  message: String
  statusCode: Int
  success: Boolean
}

enum AuthRole {
  ADMIN
  EDITOR
  USER
}

"""Change Site Template Response"""
type ChangeSiteTemplateResponse {
  data: Site
  message: String
  siteStatus: SiteStatusResponse
  statusCode: Int
  success: Boolean
}

"""Create Sites Response"""
type CreateSiteResponse {
  data: Site
  envsAdded: Boolean!
  frameWorkSet: Boolean!
  message: String
  pageCreated: Boolean!
  siteCreated: Boolean!
  siteUpdatedWithVercelProjectId: Boolean!
  subdomainAdded: Boolean!
  vercelProjectCreated: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Create Sites Response"""
type DeploySiteResponse {
  message: String
  siteId: String
  status: SiteStatus
  statusCode: Int
  success: Boolean
}

type Domain {
  boughtAt: Float
  createdAt: Float!
  creator: DomainCreator!
  customNameservers: [String!]
  expiresAt: Float
  id: String!
  intendedNameservers: [String!]!
  name: String!
  nameservers: [String!]!
  orderedAt: Float
  renew: Boolean!
  serviceType: String!
  suffix: Boolean!
  transferStartedAt: Float
  transferredAt: Float
  verified: Boolean!
}

type DomainConfigurationInterface {
  acceptedChallenges: [String!]
  configuredBy: String
  misconfigured: Boolean!
}

"""Domain Configuration Response"""
type DomainConfigurationResponse {
  data: DomainConfigurationInterface
  message: String
  statusCode: Int
  success: Boolean
}

type DomainCreator {
  customerId: String
  email: String!
  id: String!
  isDomainReseller: Boolean
  username: String!
}

type DomainInformationResponse {
  data: DomainResponse!
  message: String
  statusCode: Int
  success: Boolean
}

type DomainPriceResponse {
  data: Response!
  message: String
  statusCode: Int
  success: Boolean
}

"""Domain Information"""
type DomainRegisterResponse {
  data: ResponseInterface!
  message: String
  statusCode: Int
  success: Boolean
}

"""Domain Information"""
type DomainResponse {
  domain: Domain!
}

type DomainVerification {
  domain: String!
  reason: String!
  type: String!
  value: String!
}

enum FrameworkEnum {
  GATSBYJS
  NEXTJS
}

enum GitProvider {
  Bitbucket
  Github
}

"""Git Repository / Source"""
type GitRepository {
  ref: String
  repoId: Float!
  target: String
  type: GitProvider
  url: String
}

"""Git Repository Input"""
input GitRepositoryInput {
  ref: String = "main"
  repoId: String!
  target: String = "production"
  type: GitProvider = Github
  url: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addCustomDomain(domainName: String!, siteId: String!): SiteResponse!
  assignParent(pageId: String!, parentId: String!): PageResponse!
  changeSiteTemplate(siteId: String!, templateId: String!): ChangeSiteTemplateResponse!
  createPage(name: String!, parent: String, siteId: String!): PageResponse!
  createSite(data: SiteInput!): CreateSiteResponse!
  createTemplate(inputData: TemplateInput!): TemplateResponse!
  createUser(data: UserInput!): UserResponse!
  deleteAllUserAssets: AssetsResponse!
  deleteAsset(id: String!): AssetResponse!
  deleteAssetsByIds(ids: [String!]!): AssetsResponse!
  deleteCustomDomain(domainName: String!, siteId: String!): SiteResponse!
  deletePage(id: String!): PageResponse!
  deleteSite(id: String!): ResponseSchema!
  deleteTemplate(id: String!): ResponseSchema!
  deploySite(siteId: String!): DeploySiteResponse!
  publishPage(id: String!): PageResponse!

  """Warning! Don't use this."""
  removeParent_deprecated(pageId: String!): PageResponse!
  removeSiteLogo(logoType: String = "both", siteId: String!): SiteResponse!
  updatePage(data: UpdatePageInput!, id: String!): PageResponse!
  updatePrimaryDomain(domainName: String!, siteId: ID!): SiteResponse!
  updateSite(data: UpdateSiteInput!, id: String!): SiteResponse!
  updateSiteLogo(desktopLogo: String, mobileLogo: String, siteId: String!): SiteResponse!
  updateSitePagesPriority(data: UpdatePagesPriorityInput!): ResponseSchema!

  """Admin only, needs API key"""
  updateTemplate(data: TemplateUpdateInput!, id: String!): TemplateResponse!
  updateTemplateBannerImage(bannerImage: String!, id: String!): TemplateResponse!
  updateUser(data: UpdateUserInput!): UserResponse!
}

type NewDomain {
  boughtAt: Float
  createdAt: Float!
  creator: DomainCreator!
  customNameservers: [String!]
  expiresAt: Float
  id: String!
  intendedNameservers: [String!]!
  name: String!
  nameservers: [String!]!
  orderedAt: Float
  renew: Boolean!
  serviceType: String!
  transferStartedAt: Float
  transferredAt: Float
  verified: Boolean!
}

"""Page"""
type Page {
  bannerImage: Asset
  body: String
  children: [Page!]!
  createdAt: DateTime!
  draftBody: String
  id: ID!
  isFeatured: Boolean!
  isPublic: Boolean
  jsonBody: JSON
  jsonDraftBody: JSON
  lastPublishedAt: DateTime
  metaDescription: String
  metaTitle: String
  name: String!
  owner: ID!
  parent: Page
  priority: Int!
  site: ID!
  slug: String!
  updatedAt: DateTime!
}

enum PageFilterEnum {
  ANY
  PRIVATE
  PUBLIC
}

type PageResponse {
  data: Page
  message: String
  statusCode: Int
  success: Boolean
}

type PagesResponse {
  data: [Page!]
  message: String
  statusCode: Int
  success: Boolean
}

type Pagination {
  count: Float!
  next: Float
  prev: Float
}

type Query {
  allMyAssets(userId: String): AssetsResponse!
  checkDomainStatus(name: String!): ResponseSchema!
  checkSiteNameAvailability(nameOrSlug: String!): ResponseSchema!
  checkSubscription(email: String!, secretKey: String!): String
  checkUser(email: String!): String
  getAllMySite: SitesResponse!
  getAllOrphanPagesBySite(filter: PageFilterEnum, siteId: String!): PagesResponse!
  getAllPagesBySite(filter: PageFilterEnum, siteId: String!): PagesResponse!
  getAllSiteDomainsLinked(id: String!): SiteDomainsResponse!
  getDomainConfiguration(domain: String!): DomainConfigurationResponse!
  getDomainInformation(name: String!): DomainInformationResponse!
  getDomainPrice(name: String!): DomainPriceResponse!
  getFeaturedPagesBySite(filter: PageFilterEnum, siteId: String!): PagesResponse!
  getMySiteById(id: String!): SiteResponse!
  getPage(id: String!): PageResponse!
  getPageBySlug(filter: PageFilterEnum, siteId: String!, slug: String!): PageResponse!
  getRootPage(siteId: String!): PageResponse!
  getSiteById(id: String!): SiteResponse!
  getSiteStatus(id: String!): SiteStatusResponse!
  getTemplateById(id: String!): TemplateResponse!
  getTemplates: TemplatesResponse!
  me: UserResponse!
  myLibraryUsage(userId: String): Int!
  purchaseDomain(expectedPrice: Float, name: String!, renew: Boolean): ResponseSchema!
  registerOrTransferInDomain(name: String!): DomainRegisterResponse!
  verfiyProjectDomain(domainName: String!, projectName: String!): VercelProjectDomain!
}

type Recurring {
  interval: String
  interval_count: Float
  usage_type: String
}

type Response {
  """The number of years the domain could be held before paying again"""
  period: Float

  """The domain price in USD"""
  price: Float
}

type ResponseInterface {
  domain: NewDomain
}

type ResponseSchema {
  message: String
  statusCode: Int
  success: Boolean
}

type Site {
  createdAt: DateTime!
  customDomain: [VercelProjectDomain!]
  desktopLogo: Asset
  headerPages: [Page!] @deprecated(reason: "use rootPage instead")
  id: ID!
  logoPreference: String
  mobileLogo: Asset
  name: String
  owner: User!
  pages: [Page!]
  primaryDomain: String
  productId: String
  rootPage: Page!
  setup: Int!
  slug: String!
  template: ID!
  textLogo: String
  updatedAt: DateTime!
  url: String
  vercelProjectId: String
}

type SiteDomainsResponse {
  data: VercelProjectDomainsResponse
  message: String
  statusCode: Int
  success: Boolean
}

input SiteInput {
  slug: String!
  templateId: String = "635e2719eb8e4174ebc9998a"
}

"""Site Response"""
type SiteResponse {
  data: Site
  message: String
  statusCode: Int
  success: Boolean
}

"""Site Status"""
type SiteStatus {
  createdAt: Float
  domain: String
  readyState: String
}

"""Site status"""
type SiteStatusResponse {
  data: SiteStatus
  message: String
  statusCode: Int
  success: Boolean
}

"""Sites Response"""
type SitesResponse {
  data: [Site!]
  message: String
  statusCode: Int
  success: Boolean
}

type StripePrice {
  active: Boolean!

  """
  Describes how to compute the price per period. Either per_unit or tiered. per_unit indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity (for prices with usage_type=licensed), or per unit of total usage (for prices with usage_type=metered). tiered indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.
  """
  billing_scheme: String!
  created: Float!
  currency: String!
  custom_unit_amount: String
  id: String!

  """is true if the object exists in live, false if it's in test mode"""
  livemode: Boolean!
  lookup_key: String
  metadata: JSON
  nickname: String
  object: String!

  """The Product Id that this Price is linked to"""
  product: String!
  recurring: Recurring
  tax_behavior: String
  tiers_mode: String
  transform_quantity: String
  type: String!

  """The actual price number"""
  unit_amount: Int
  unit_amount_decimal: String
}

type StripeProduct {
  active: Boolean!
  default_price: StripePrice
  description: String
  id: String!
  images: [String!]

  """Whether the product is in live mode / test mode"""
  livemode: Boolean!
  metadata: JSON
  name: String!
  package_dimensions: String
  prices: [StripePrice!]
  shippable: Boolean
  statement_descriptor: String
  tax_code: String
  unit_label: String
  updated: Float!
  url: String
}

type StripeSubscription {
  application: JSONObject
  application_fee_percent: String
  automatic_tax: String
  billing_cycle_anchor: String
  billing_thresholds: JSONObject
  cancel_at: String
  cancel_at_period_end: String
  canceled_at: String
  cancellation_details: JSONObject
  collection_method: JSONObject
  created: String
  currency: String
  currentPlan: StripePrice
  current_period_end: String
  current_period_start: String
  customer: String
  days_until_due: Int
  default_payment_method: JSONObject
  default_source: JSONObject
  default_tax_rates: [JSONObject!]
  description: String
  discount: JSONObject
  ended_at: String
  id: String
  livemode: Boolean
  metadata: JSONObject
  next_pending_invoice_item_invoice: String
  object: String
  on_behalf_of: JSONObject
  pause_collection: JSONObject
  payment_settings: String
  pending_invoice_item_interval: String
  pending_setup_intent: String
  pending_update: String
  schedule: String
  start_date: String
  status: String
  test_clock: String
  transfer_data: String
  trial_end: String
  trial_start: String
}

"""Template"""
type Template {
  bannerImage: String
  createdAt: DateTime!
  creator: ID
  demoLink: String
  description: String
  framework: FrameworkEnum
  gitSource: GitRepository!
  id: ID!
  name: String!

  """The Product from Stripe"""
  stripeProduct: StripeProduct
  updatedAt: DateTime!
}

"""Template Input"""
input TemplateInput {
  bannerImage: String
  creator: String
  demoLink: String
  description: String
  framework: String = "nextjs"
  gitSource: GitRepositoryInput!
  name: String!
  stripeProduct: String
}

"""Template Response"""
type TemplateResponse {
  data: Template
  message: String
  statusCode: Int
  success: Boolean
}

"""Template Update Input"""
input TemplateUpdateInput {
  bannerImage: String
  demoLink: String
  description: String
  framework: String
  gitSource: GitRepositoryInput
  name: String
  stripeProduct: String
}

"""Template Response"""
type TemplatesResponse {
  data: [Template!]
  message: String
  statusCode: Int
  success: Boolean
}

input UpdatePageInput {
  bannerImage: ID
  draftBody: String
  isFeatured: Boolean
  jsonDraftBody: JSON
  metaDescription: String
  metaTitle: String
  name: String
  slug: String
}

input UpdatePagesPriority {
  id: ID!
  priority: Float!
}

input UpdatePagesPriorityInput {
  pagesList: [UpdatePagesPriority!]!
}

input UpdateSiteInput {
  desktopLogo: ID
  mobileLogo: ID
  name: String
  textLogo: String
}

input UpdateUserInput {
  name: String
  onboardingState: Int = -1
}

"""User model"""
type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String
  onboardingState: Int
  role: AuthRole!
  sites: [Site!]
  subscription: StripeSubscription
  updatedAt: DateTime!
}

input UserInput {
  email: String!
  name: String!
  onboardingState: Int = -1
  trialExpires: String!
}

"""User Response"""
type UserResponse {
  data: User
  message: String
  statusCode: Int
  success: Boolean
}

"""Domain Response from vercel"""
type VercelProjectDomain {
  apexName: String!
  createdAt: Float
  gitBranch: String
  name: String!
  projectId: String!
  redirect: String
  redirectStatusCode: Int
  updatedAt: Float
  verification: [DomainVerification!]
  verified: Boolean!
}

type VercelProjectDomainsResponse {
  domains: [VercelProjectDomain!]
  pagination: Pagination!
}
